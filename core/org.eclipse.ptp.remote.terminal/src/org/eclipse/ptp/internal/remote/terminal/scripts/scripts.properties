WATCH_CSH_HISTORY_PERL_SCRIPT =                           \
  $/ = undef;                                             \
  select(STDOUT);                                         \
  $|=1;                                                   \
  my $t = 0;                                              \
  my %keys = ();                                          \
  while(1) {                                              \
    my $hist = $ENV{HOME}."/.ptp-histfile";               \
    my @a = stat($hist);                                  \
    if($#a >= 9) {                                        \
      my $nt = $a[9]*1;                                   \
      if($nt != $t) {                                     \
        $t = $nt;                                         \
        open(fd,$hist);                                   \
        my $c = <fd>;                                     \
        close(fd);                                        \
        while($c =~ /#\\+(\\d+)\\r?\\n(.*)\\r?\\n/g) {    \
          my ($id,$cmd)=($1,$2);                          \
          unless(defined($keys{$id})) {                   \
            print $cmd,"\\n";                             \
            $keys{$id}=1;                                 \
          }                                               \
        }                                                 \
      }                                                   \
    }                                                     \
    sleep(3);                                             \
  }
INSTALL_PTP_SCRIPTS =                                                           \
require("FileHandle.pm");                                                       \
my $home = $ENV{HOME};                                                          \
my $ptp_cmd_src=qq{#!/usr/bin/perl\\x{a}                                        \
require("File/Spec.pm");                                                        \
my \\@files = ();                                                               \
my \\$aflag = 0;                                                                \
my \\$type = undef;                                                             \
for \\$a (\\@ARGV) {                                                            \
    if(\\${a} eq "-a") {                                                        \
        \\$aflag = 1;                                                           \
    } elsif(\\$a =~ /-t=(.*)/) {                                                \
        \\$type=\\$1;                                                           \
    } elsif(-r \\$a) {                                                          \
        push \\@files, File::Spec->rel2abs(\\$a);                               \
    }                                                                           \
}                                                                               \
if(\\$#files == 0) {                                                            \
    if(defined(\\$type)) {                                                      \
        print "~~EPTP:OpenFile~~EDID=",\\$type,"~~",\\$files[0],"\\\\n";        \
    } else {                                                                    \
        print "~~EPTP:OpenFile~~",\\$files[0],"\\\\n";                          \
    }                                                                           \
} elsif(\\$aflag) {                                                             \
    for \\$file (\\@files) {                                                    \
        if(defined(\\$type)) {                                                  \
            print "~~EPTP:OpenFile~~EDID=",\\$type,"~~",\\$file,"\\\\n";        \
        } else {                                                                \
            print "~~EPTP:OpenFile~~",\\$file,"\\\\n";                          \
        }                                                                       \
        sleep(1);                                                               \
    }                                                                           \
} else {                                                                        \
    if(defined(\\$type)) {                                                      \
        print "~~EPTP:Choice~~EDID=",\\$type,"~~",join("~~",\\@files),"\\\\n";  \
    } else {                                                                    \
        print "~~EPTP:Choice~~",join("~~",\\@files),"\\\\n";                    \
    }                                                                           \
}                                                                               \
};                                                                              \
my $pr =  sub{                                                                  \
  my $fd=shift;                                                                 \
  my $str=shift;                                                                \
  eval("print\\x{20}\\$fd\\x{20}\\$str;");                                      \
};                                                                              \
if(-w $home) {                                                                  \
    my $ptp_bin=$home."/ptp-bin";                                               \
    unless(-d $ptp_bin) {                                                       \
        mkdir($ptp_bin);                                                        \
    }                                                                           \
    my $ptp_rc=$home."/.ptprc";                                                 \
    my $ptp_rc_csh=$ptp_rc.".csh";                                              \
    my $ptp_rc_sh=$ptp_rc.".sh";                                                \
    unless(-r $ptp_rc_csh) {                                                    \
        my $fd = FileHandle->new();                                             \
        open($fd,">".$ptp_rc_csh);                                              \
        $pr->($fd,"set\\x{20}path=(${ptp_bin}\\x{20}\\$path)\\n");              \
        $pr->($fd,"set\\x{20}history=1000\\n");                                 \
        $pr->($fd,"set\\x{20}histfile=~/.ptp-histfile\\n");                     \
        $pr->($fd,"set\\x{20}savehist=(1000\\x{20}merge)\\n");                  \
        $pr->($fd,"alias\\x{20}precmd\\x{20}'history\\x{20}-S'\\n");            \
        $pr->($fd,"setenv\\x{20}PTP_TERM\\x{20}1\\n");                          \
        close($fd);                                                             \
    }                                                                           \
    unless(-r $ptp_rc_sh) {                                                     \
        my $fd = FileHandle->new();                                             \
        open($fd,">".$ptp_rc_sh);                                               \
        $pr->($fd,"export\\x{20}PATH=\\"${ptp_bin}:\\$PATH\\"\\n");             \
        $pr->($fd,"export\\x{20}HISTFILE=~/.ptp-histfile\\n");                  \
        $pr->($fd,"shopt\\x{20}-s\\x{20}histappend\\n");                        \
        $pr->($fd,"export\\x{20}PROMPT_COMMAND=\\"history\\x{20}-a;history\\x{20}-n\\"\\n"); \
        $pr->($fd,"export\\x{20}PTP_TERM=1\\n");                                \
        close($fd);                                                             \
    }                                                                           \
    my $ptp_cmd = $ptp_bin . "/ptp";                                            \
    unless(-x $ptp_cmd) {                                                       \
        my $fd = FileHandle->new();                                             \
        open($fd,">".$ptp_cmd);                                                 \
        $pr->($fd,$ptp_cmd_src);                                                \
        close($fd);                                                             \
        chmod(0755,$ptp_cmd);                                                   \
    }                                                                           \
}
